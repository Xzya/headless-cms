// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FieldAttributesValidators field attributes validators
// swagger:model fieldAttributesValidators
type FieldAttributesValidators struct {

	// enum
	Enum *FieldAttributesValidatorsEnum `json:"enum,omitempty"`

	// format
	Format *FieldAttributesValidatorsFormat `json:"format,omitempty"`

	// length
	Length *FieldAttributesValidatorsLength `json:"length,omitempty"`

	// required
	Required interface{} `json:"required,omitempty"`

	// unique
	Unique interface{} `json:"unique,omitempty"`
}

// Validate validates this field attributes validators
func (m *FieldAttributesValidators) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnum(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FieldAttributesValidators) validateEnum(formats strfmt.Registry) error {

	if swag.IsZero(m.Enum) { // not required
		return nil
	}

	if m.Enum != nil {

		if err := m.Enum.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enum")
			}
			return err
		}

	}

	return nil
}

func (m *FieldAttributesValidators) validateFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.Format) { // not required
		return nil
	}

	if m.Format != nil {

		if err := m.Format.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("format")
			}
			return err
		}

	}

	return nil
}

func (m *FieldAttributesValidators) validateLength(formats strfmt.Registry) error {

	if swag.IsZero(m.Length) { // not required
		return nil
	}

	if m.Length != nil {

		if err := m.Length.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("length")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FieldAttributesValidators) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FieldAttributesValidators) UnmarshalBinary(b []byte) error {
	var res FieldAttributesValidators
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
