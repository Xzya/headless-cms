// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmailCredentialsAttributes email credentials attributes
// swagger:model emailCredentialsAttributes
type EmailCredentialsAttributes struct {

	// email
	// Required: true
	Email strfmt.Email `json:"email"`

	// password
	// Required: true
	// Max Length: 32
	// Min Length: 8
	Password strfmt.Password `json:"password"`
}

// Validate validates this email credentials attributes
func (m *EmailCredentialsAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailCredentialsAttributes) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", strfmt.Email(m.Email)); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EmailCredentialsAttributes) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", strfmt.Password(m.Password)); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", string(m.Password), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(m.Password), 32); err != nil {
		return err
	}

	if err := validate.FormatOf("password", "body", "password", m.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmailCredentialsAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmailCredentialsAttributes) UnmarshalBinary(b []byte) error {
	var res EmailCredentialsAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
