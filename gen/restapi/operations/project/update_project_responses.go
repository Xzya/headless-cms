// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Xzya/headless-cms/gen/models"
)

// UpdateProjectOKCode is the HTTP code returned for type UpdateProjectOK
const UpdateProjectOKCode int = 200

/*UpdateProjectOK The project details

swagger:response updateProjectOK
*/
type UpdateProjectOK struct {

	/*
	  In: Body
	*/
	Payload *models.ProjectResponse `json:"body,omitempty"`
}

// NewUpdateProjectOK creates UpdateProjectOK with default headers values
func NewUpdateProjectOK() *UpdateProjectOK {

	return &UpdateProjectOK{}
}

// WithPayload adds the payload to the update project o k response
func (o *UpdateProjectOK) WithPayload(payload *models.ProjectResponse) *UpdateProjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project o k response
func (o *UpdateProjectOK) SetPayload(payload *models.ProjectResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateProjectDefault unexpected error

swagger:response updateProjectDefault
*/
type UpdateProjectDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateProjectDefault creates UpdateProjectDefault with default headers values
func NewUpdateProjectDefault(code int) *UpdateProjectDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateProjectDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update project default response
func (o *UpdateProjectDefault) WithStatusCode(code int) *UpdateProjectDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update project default response
func (o *UpdateProjectDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update project default response
func (o *UpdateProjectDefault) WithPayload(payload *models.Error) *UpdateProjectDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project default response
func (o *UpdateProjectDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
