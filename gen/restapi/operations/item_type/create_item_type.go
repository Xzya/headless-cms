// Code generated by go-swagger; DO NOT EDIT.

package item_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateItemTypeHandlerFunc turns a function with the right signature into a create item type handler
type CreateItemTypeHandlerFunc func(CreateItemTypeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateItemTypeHandlerFunc) Handle(params CreateItemTypeParams) middleware.Responder {
	return fn(params)
}

// CreateItemTypeHandler interface for that can handle valid create item type params
type CreateItemTypeHandler interface {
	Handle(CreateItemTypeParams) middleware.Responder
}

// NewCreateItemType creates a new http.Handler for the create item type operation
func NewCreateItemType(ctx *middleware.Context, handler CreateItemTypeHandler) *CreateItemType {
	return &CreateItemType{Context: ctx, Handler: handler}
}

/*CreateItemType swagger:route POST /projects/{projectId}/item-types item-type createItemType

Create a model

*/
type CreateItemType struct {
	Context *middleware.Context
	Handler CreateItemTypeHandler
}

func (o *CreateItemType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateItemTypeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
