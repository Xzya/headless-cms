// Code generated by go-swagger; DO NOT EDIT.

package item_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetItemTypesHandlerFunc turns a function with the right signature into a get item types handler
type GetItemTypesHandlerFunc func(GetItemTypesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetItemTypesHandlerFunc) Handle(params GetItemTypesParams) middleware.Responder {
	return fn(params)
}

// GetItemTypesHandler interface for that can handle valid get item types params
type GetItemTypesHandler interface {
	Handle(GetItemTypesParams) middleware.Responder
}

// NewGetItemTypes creates a new http.Handler for the get item types operation
func NewGetItemTypes(ctx *middleware.Context, handler GetItemTypesHandler) *GetItemTypes {
	return &GetItemTypes{Context: ctx, Handler: handler}
}

/*GetItemTypes swagger:route GET /projects/{projectId}/item-types item-type getItemTypes

Get the item types for the project

*/
type GetItemTypes struct {
	Context *middleware.Context
	Handler GetItemTypesHandler
}

func (o *GetItemTypes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetItemTypesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
