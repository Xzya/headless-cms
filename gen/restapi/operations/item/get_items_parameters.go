// Code generated by go-swagger; DO NOT EDIT.

package item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetItemsParams creates a new GetItemsParams object
// no default values defined in spec.
func NewGetItemsParams() GetItemsParams {

	return GetItemsParams{}
}

// GetItemsParams contains all the bound params for the get items operation
// typically these are obtained from a http.Request
//
// swagger:parameters getItems
type GetItemsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*IDs to include in the response
	  In: query
	*/
	Ids []int32
	/*The limit count
	  Minimum: 0
	  In: query
	*/
	Limit *int32
	/*The page offset
	  Minimum: 0
	  In: query
	*/
	Offset *int32
	/*The project id
	  Required: true
	  In: path
	*/
	ProjectID string
	/*The filter query
	  In: query
	*/
	Query *string
	/*The item-type id of the items
	  Minimum: 1
	  In: query
	*/
	Type *int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetItemsParams() beforehand.
func (o *GetItemsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qIds, qhkIds, _ := qs.GetOK("ids")
	if err := o.bindIds(qIds, qhkIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	rProjectID, rhkProjectID, _ := route.Params.GetOK("projectId")
	if err := o.bindProjectID(rProjectID, rhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	qQuery, qhkQuery, _ := qs.GetOK("query")
	if err := o.bindQuery(qQuery, qhkQuery, route.Formats); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetItemsParams) bindIds(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvIds string
	if len(rawData) > 0 {
		qvIds = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	idsIC := swag.SplitByFormat(qvIds, "")
	if len(idsIC) == 0 {
		return nil
	}

	var idsIR []int32
	for i, idsIV := range idsIC {
		// items.Format: "int32"
		idsI, err := swag.ConvertInt32(idsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "ids", i), "query", "int32", idsI)
		}

		if err := validate.MinimumInt(fmt.Sprintf("%s.%v", "ids", i), "query", int64(idsI), 1, false); err != nil {
			return err
		}

		idsIR = append(idsIR, idsI)
	}

	o.Ids = idsIR

	return nil
}

func (o *GetItemsParams) validateIds(formats strfmt.Registry) error {

	return nil
}

func (o *GetItemsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int32", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetItemsParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", int64(*o.Limit), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *GetItemsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int32", raw)
	}
	o.Offset = &value

	if err := o.validateOffset(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetItemsParams) validateOffset(formats strfmt.Registry) error {

	if err := validate.MinimumInt("offset", "query", int64(*o.Offset), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *GetItemsParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ProjectID = raw

	return nil
}

func (o *GetItemsParams) bindQuery(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Query = &raw

	return nil
}

func (o *GetItemsParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("type", "query", "int32", raw)
	}
	o.Type = &value

	if err := o.validateType(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetItemsParams) validateType(formats strfmt.Registry) error {

	if err := validate.MinimumInt("type", "query", int64(*o.Type), 1, false); err != nil {
		return err
	}

	return nil
}
