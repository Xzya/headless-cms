// Code generated by go-swagger; DO NOT EDIT.

package field

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProjectFieldsParams creates a new GetProjectFieldsParams object
// no default values defined in spec.
func NewGetProjectFieldsParams() GetProjectFieldsParams {

	return GetProjectFieldsParams{}
}

// GetProjectFieldsParams contains all the bound params for the get project fields operation
// typically these are obtained from a http.Request
//
// swagger:parameters getProjectFields
type GetProjectFieldsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*ID of a related resource to include in the response. The resource must be specified in the target parameter
	  In: query
	*/
	ID *int32
	/*IDs to include in the response
	  In: query
	*/
	Ids []int32
	/*The project id
	  Required: true
	  In: path
	*/
	ProjectID string
	/*Target resource of the query. Must include the id of the resource as well.
	  In: query
	*/
	Target *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetProjectFieldsParams() beforehand.
func (o *GetProjectFieldsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qID, qhkID, _ := qs.GetOK("id")
	if err := o.bindID(qID, qhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qIds, qhkIds, _ := qs.GetOK("ids")
	if err := o.bindIds(qIds, qhkIds, route.Formats); err != nil {
		res = append(res, err)
	}

	rProjectID, rhkProjectID, _ := route.Params.GetOK("projectId")
	if err := o.bindProjectID(rProjectID, rhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	qTarget, qhkTarget, _ := qs.GetOK("target")
	if err := o.bindTarget(qTarget, qhkTarget, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProjectFieldsParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("id", "query", "int32", raw)
	}
	o.ID = &value

	return nil
}

func (o *GetProjectFieldsParams) bindIds(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvIds string
	if len(rawData) > 0 {
		qvIds = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	idsIC := swag.SplitByFormat(qvIds, "")
	if len(idsIC) == 0 {
		return nil
	}

	var idsIR []int32
	for i, idsIV := range idsIC {
		// items.Format: "int32"
		idsI, err := swag.ConvertInt32(idsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "ids", i), "query", "int32", idsI)
		}

		if err := validate.MinimumInt(fmt.Sprintf("%s.%v", "ids", i), "query", int64(idsI), 1, false); err != nil {
			return err
		}

		idsIR = append(idsIR, idsI)
	}

	o.Ids = idsIR

	return nil
}

func (o *GetProjectFieldsParams) validateIds(formats strfmt.Registry) error {

	return nil
}

func (o *GetProjectFieldsParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ProjectID = raw

	return nil
}

func (o *GetProjectFieldsParams) bindTarget(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Target = &raw

	if err := o.validateTarget(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetProjectFieldsParams) validateTarget(formats strfmt.Registry) error {

	if err := validate.Enum("target", "query", *o.Target, []interface{}{"itemTypeId"}); err != nil {
		return err
	}

	return nil
}
