// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateRoleHandlerFunc turns a function with the right signature into a create role handler
type CreateRoleHandlerFunc func(CreateRoleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateRoleHandlerFunc) Handle(params CreateRoleParams) middleware.Responder {
	return fn(params)
}

// CreateRoleHandler interface for that can handle valid create role params
type CreateRoleHandler interface {
	Handle(CreateRoleParams) middleware.Responder
}

// NewCreateRole creates a new http.Handler for the create role operation
func NewCreateRole(ctx *middleware.Context, handler CreateRoleHandler) *CreateRole {
	return &CreateRole{Context: ctx, Handler: handler}
}

/*CreateRole swagger:route POST /projects/{projectId}/roles role createRole

Create a new role

*/
type CreateRole struct {
	Context *middleware.Context
	Handler CreateRoleHandler
}

func (o *CreateRole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateRoleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
